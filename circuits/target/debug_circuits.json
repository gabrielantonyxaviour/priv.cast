{"debug_symbols":[{"locations":{"0":[{"span":{"start":750,"end":756},"file":0}]}}],"file_map":{"0":{"source":"// use dep::std;\n// use dep::ecrecover;\n\n// // Oracle\n// fn check_farcaster_id(farcasterId: Field, voter: Field)-> pub bool {\n//   true\n// }\n\n// fn main(\n//   pub_key_x: [u8; 32],\n//   pub_key_y: [u8; 32],\n//   signature: [u8; 64],\n//   merkle_path: [Field; 4],\n//   voter: Field,\n//   farcasterId: Field,\n//   nullifier: pub Field,\n//   new_merkle_root: pub Field,\n//   vote: pub u8\n//   ) {\n//     // verify signature (Aim: Check if he intented to vote)\n\n//     // find a way for nullifier (Aim: Check if already voted)\n//     // recursive proofs hopefully\n\n//     // check farcaster id (Aim: Check validity of the farcaster id)\n//     // Use oracle\n// }\n\n// #[test]\n// fn test_main() {\n\n// }\n\nfn main(x: Field, y: Field) -> pub Field {\n    assert(x == y, \"x is not equal to y\");\n    x + y\n}\n\n#[test]\nfn test_main() {\n    main(1, 1);\n}\n\n#[test(should_fail)]\nfn test_main_fail() {\n    main(1, 2);\n}\n","path":"/Users/gabrielantonyxaviour/Developer/projects/Ongoing projects/priv.cast/circuits/src/main.nr"}},"warnings":[]}